# Mini-project  -  RiceRocks (Asteroids) 
# Spacoshipo
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
started = False
rock_group =set()
missile_group = set()
explosion_group= set()
time = 0.5
lives = 0
score = 0
expl_time = 25
fire_away = False
time_missile = 0

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated
    
    
    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)	
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot2.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

missile_sound.set_volume(.3)
soundtrack.set_volume(.2)
explosion_sound.set_volume(.3)
ship_thrust_sound.set_volume(.3)

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)


# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self, canvas):
        img_center = list(self.image_center)
        if self.thrust:
            img_center[0] = self.image_center[0] + self.image_size[0]
        canvas.draw_image(self.image, img_center, self.image_size,
                          self.pos, self.image_size, self.angle)


    def update(self):
        global started
        if not started:
            self.vel[0] = 0 
            self.vel[1] = 0
            self.angle = 0
            self.angle_vel = 0
            self.pos[0] = WIDTH / 2 + self.vel[0] 
            self.pos[1] = HEIGHT / 2 + self.vel[1] 
            return
        # update angle
        self.angle += self.angle_vel

        # update position
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT

        # update velocity
        if self.thrust:
            acc = angle_to_vector(self.angle)
            self.vel[0] += acc[0] * 0.15
            self.vel[1] += acc[1] * 0.15

        self.vel[0] *= 0.98
        self.vel[1] *= 0.98

    def switch_thrust(self, attribute):
        global started
        self.thrust = min(attribute, started)
        if self.thrust:
            ship_thrust_sound.rewind()
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.pause()
        
    def shooting(self):
        global missile_group, fire_away
        if not fire_away:
            return
        
        shoot = []
        forward = angle_to_vector(self.angle)
        missile_pos = [self.pos[0] + self.radius * forward[0],
                       self.pos[1] + self.radius * forward[1]]
        missile_vel = [self.vel[0] + 9 * forward[0],		
                       self.vel[1] + 9 * forward[1]]
        shoot = Sprite(missile_pos, missile_vel, self.angle, 0,
                                 missile_image, missile_info, missile_sound)
        missile_group.add(shoot)
       

    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def change_angle_vel(self, const):
        self.angle_vel += const

        
 # Sprite class
class Sprite:

    def __init__(self, pos, vel, ang, ang_vel, image, info, sound=None):
        self.pos = [pos[0], pos[1]]
        self.vel = [vel[0], vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
            
    def draw(self, canvas):
        center = list(self.image_center)
        if self.animated:
            center[0] = self.image_center[0] + (self.image_size[0] * self.age)
        img_size =  self.image_size
        canvas.draw_image(self.image, center, img_size,
                          self.pos, img_size, self.angle)
        
 
    def update(self):
        # update angle
        global started
        if not started:
            return True
        self.angle += self.angle_vel

        # update position
        self.pos[0] += self.vel[0]	
        self.pos[1] += self.vel[1]
        self.pos[0] %= WIDTH	
        self.pos[1] %= HEIGHT

        self.age += 1
        return self.age >= self.lifespan

    def collide(self, other_object):
        # return True if there is a collision or False otherwise
        return dist(self.pos, other_object.pos) <= self.radius + other_object.radius
    
    def get_position(self):
        return self.pos
    
    def get_radius(self):
        return self.radius
    
    def collide_frame(self):
        dist_top    = dist(self.pos,[self.pos[0],0])
        dist_left   = dist(self.pos,[0,self.pos[1]])
        dist_bottom = dist(self.pos, [self.pos[0], HEIGHT])
        dist_right  = dist(self.pos, [WIDTH, self.pos[1]])
        dist_min = min(dist_top, dist_left, dist_bottom, dist_right)
        return dist_min < 2 * self.radius 


def keydown(key):
    global my_ship, started, fire_away
    if not started:
        return my_ship.switch_thrust(False)
    a_vel = 0.06
    if key == simplegui.KEY_MAP['up']:       
       my_ship.switch_thrust(True)
    if key == simplegui.KEY_MAP['left']:
       my_ship.change_angle_vel(-a_vel)
    if key == simplegui.KEY_MAP['right']:
       my_ship.change_angle_vel(a_vel)
    if key == simplegui.KEY_MAP['space']:
       fire_away = True
       if not timer2.is_running():
            timer2.start() 
   
   
def keyup(key):
    global my_ship, started, fire_away, time_missile
    if not started:
        return my_ship.switch_thrust(False)   
    if key == simplegui.KEY_MAP['up']:       
       my_ship.switch_thrust(False)
    if key == simplegui.KEY_MAP['left']:
       my_ship.angle_vel =  0
    if key == simplegui.KEY_MAP['right']:
       my_ship.angle_vel =  0
    if key == simplegui.KEY_MAP['space']:
       fire_away = False
       time_missile = 0
       if timer2.is_running():
            timer2.stop() 

def group_collide_frame(group):
    bump = False
    for item in set(group):
        if item.collide_frame():
            group.remove(item)
            bump = True
    return bump
    

def group_collide(group, other_object):
    global explosion_group
    bump = False
    for item in set(group):
        if item.collide(other_object):
            group.remove(item)
            bump = True
            explosion_group.add(Sprite(item.pos, [0, 0], 0, 0, explosion_image,
                                       explosion_info, explosion_sound))
    return bump


def group_group_collide(group, other_group):
    counter = 0
    for item in set(group):
        collision = group_collide(other_group, item)
        if collision:
            group.remove(item)
            counter += 1
    return counter


def process_sprite_group(group, canvas):
    for item in set(group):
        if item.update():
            group.remove(item)
        item.draw(canvas)

def missile_spawner():
     global started, fire_away, time_missile 
  
     if not started:
        time_missile = 0
        if timer2.is_running():
            timer2.stop()
        return        
     time_missile += 1
     if fire_away:   
        my_ship.shooting()

def rock_spawner():
    global time, started, score, lives, rock_group, my_ships
    counter = 12
    if not started:
        soundtrack.pause() 
        time = 0
        if timer.is_running():
            timer.stop()
        return
    time += 1
 
    rock_vel = [random.random() * ((-1) ** random.randrange(1,100)), random.random() * ((-1) ** random.randrange(1,100))]
    rock_avel = random.random() * ((-1) ** random.randrange(1,100))	* 0.1	
    rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
 
    # ensure rock_pos is at least 100px away of my_ship
    while dist(rock_pos, my_ship.pos) < 100:
        rock_pos = [random.randrange(0, WIDTH), random.randrange(0, HEIGHT)]
    
    scr_vel = 1. + math.sqrt(score * 0.01)

    rock_vel[0] *= scr_vel
    rock_vel[1] *= scr_vel
    
    # add rock to the rock set

    if len(rock_group) < counter:
        rock_group.add(Sprite(rock_pos, rock_vel, 0, rock_avel,
                          asteroid_image, asteroid_info))
   

def mouse_handler(position):
    global started, lives, score, rock_group, missile_group, explosion_group, fire_away,time_missile
    if not (position[0] in range(WIDTH / 2 - 200, WIDTH / 2 + 200) and
            position[1] in range (HEIGHT / 2 - 150, HEIGHT / 2 + 150)):
        return
    if not started:       
        soundtrack.rewind()
        soundtrack.play()
        rock_group =set()
        missile_group = set()
        fire_away = False
        time_missile = 0
        explosion_group= set()
        started = True
        lives = 3
        score = 0        
        if not timer.is_running():
            timer.start()
        if not timer2.is_running():
            timer2.start()
 
    
    
def draw_handler(canvas):
    global time,lives, score, started
    
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_text("Lives  "+str(lives), [50,30], 30, "White")
    canvas.draw_text("Score  "+str(score), [WIDTH - 150, 30], 30, "White")
    if not started:
        canvas.draw_image(splash_image, splash_info.center, splash_info.size, ( WIDTH / 2, HEIGHT / 2), splash_info.size)
        
    for rock in rock_group:
        for i in range(2):      
            rock.pos[i] += rock.vel[i]
  
    my_ship.draw(canvas)        
    process_sprite_group(rock_group, canvas)
    group_collide_frame(missile_group)
    process_sprite_group(missile_group, canvas) 
    process_sprite_group(explosion_group, canvas)
    my_ship.update()
    if group_collide(rock_group, my_ship) and lives > 0:
        lives -= 1
    if lives == 0:
       started = False
    else:
        score += group_group_collide(missile_group, rock_group) 
        
my_ship = Ship([WIDTH / 2, HEIGHT / 2], [0, 0], 0, ship_image, ship_info)

timer = simplegui.create_timer(1000.0, rock_spawner)
timer2 = simplegui.create_timer(100.0, missile_spawner)
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)
frame.set_draw_handler(draw_handler)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(mouse_handler)
frame.start()
timer.start()


